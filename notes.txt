// Focus on category as category appears on all stores and there are often multiple catgeories for a single product.
//
// 1. If a category to prioritise has been included then group together all products that contain that category otherwise pick the category which occurs most often.
// Remove any products that do not.
//
// 2. If a second category to prioritise has been included pick that otherwise choose the category that occurs most often.
//
// Continue until a certain benchmark of products have been reached. (not to few, but not a large number of products either)
// This is the first virtual product, remove the products from the pool of products to group and repeat on remaining products using the above criteria to
// gather all virtual product types.
//
// Place weighting on the virtual products based on:
//
// 1: Prioritisation: if the user has prioritised a category then more weight will be applied to the virtual product if it contains that category.
// 2: Half Life: virtual products built from products that were viewed more recently should have higher weighting.
// 3: Number of products: Virtual products built from a high number of products.
//
// Thoughts on clustering by other data points?
// User could possibly give a field to cluster on eg. price. We can then build virtual products around certain price points, these virtual products
// can then be combined with the category to give a more targeted product recommendation.



/* ANALYSIS */
/* LOOP through signal looking for the category/brand that was prioritised in the input parameters OR the category/brand which appears most often */
// FOR items that are found in the previous loop LOOP through these items to find other comminalities (May need multiple loops?)
// apply weighting to output (lower weighting for items that were viewed a long time ago)
// place final collection of attributes along with overall weight into OUTPUT array, remove items from this loop from the pool of items.
// Repeat the above until target number of clusters are found.

/* Fetch products from database */
// FOR EACH of the virtual product clusters build a mongodb query to search for products in the product database which match the target products
// Potentially exclude products that the customer has already looked at? (Possibly have this as an input paramenter)
// Connect to database, IF error RETURN error
// ELSE run query in product database and fetch all products which meet the criteria
// Append output criteria to the corrasponding output object ie {weight: 0.9, attributes: {brand: "Nikle", colour: "white", season: "Spring Collection"}, products: [{product 0}, {product 1}]}

// RETURN OutputArray

// '573873c03412e8ed0bc2b0fe'
// 56c4b2c97c52196340516161 - Fix 11 recommendation bug

// useful code
for (var i = 0; i < categoryClusters.length; i++) {
  var cluster = categoryClusters[i];

  console.log('-----');
  console.log('Cluster: ' + (i+1));
  var string = 'Cluster Categories: ';
  for (var x = 0; x < clusterCategories[i].length; x++) {
    var categories = clusterCategories[i][x];
    string += (categories + ', ');
  }
  console.log(string);
  console.log('Cluster Confidence Weight: ' + cluster.weight);
  console.log('Cluster Confidence Percentage: ' + cluster.percentage + '%');
  console.log('Number Of Products Recommended From This Cluster: ' + Math.round((noProductsToReturn - noNewProducts) * (parseFloat(cluster.percentage) / 100.0)));
  console.log('-----');
}

-------------

else {
//   // Pass some variables through for MoreInfo mode
//   misc.categoryClusters = categoryClusters;
//   misc.noNewProducts = noNewProducts;
//   outputBuilder(products, clusterCategories, misc);
// }

recommendation systems 2014

cluster.products = null; // Signify failed cluster
// Grab products from the collabProductStore if available
for (var x = 0; x < limit; x++) {
  if (collabProductStore.length) {
    for (var i = 0; i < collabProductStore.length; i++) {
      var product = collabProductStore[i];
      var views = product.count[0];

      if (typeof views !== 'undefined' && productsToExclude.indexOf(product.prid) === -1) {
        // Add product to output
        for (var x = 0; x < categoryClusters.length; x++) {
          var catCluster = categoryClusters[x];

          if(catCluster.id === 'CF0'){
            catCluster.products.push(product);
          }
        }
        // Remove product from store as we have used it
        collabProductStore.splice(x, 1);
        break;
      } else {
        var randomNo = (Math.floor(Math.random() * collabProductStore.length));
        var product = collabProductStore[randomNo];

        // Add product to output
        for (var i = 0; i < categoryClusters.length; i++) {
          var catCluster = categoryClusters[i];

          if(catCluster.id === 'CF0'){
            catCluster.products.push(product);
          }
        }
        // Remove product from store as we have used it
        collabProductStore.splice(randomNo, 1);
        break;
      }
    }

  } else if(productStore.length) {
    for (var i = 0; i < productStore.length; i++) {
      var product = productStore[i];
      var views = product.count[0];

      if (typeof views !== 'undefined' && productsToExclude.indexOf(product.prid) === -1) {
        // Add product to output
        for (var x = 0; x < categoryClusters.length; x++) {
          var catCluster = categoryClusters[x];

          if(catCluster.id === productClusterId){
            catCluster.products.push(product);
          }
        }

        // Remove product from docs as we have used it
        productStore.splice(x, 1);
        break;
      } else {
        var randomNo          = (Math.floor(Math.random() * productStore.length));
        var product           = productStore[randomNo].product;
        var productClusterId  = productStore[randomNo].id;

        // Add product to output
        for (var i = 0; i < categoryClusters.length; i++) {
          var catCluster = categoryClusters[i];

          if(catCluster.id === productClusterId){
            catCluster.products.push(product);
          }
        }

        // Remove product from docs as we have used it
        productStore.splice(randomNo, 1);
        break;
      }
    }
}
}
